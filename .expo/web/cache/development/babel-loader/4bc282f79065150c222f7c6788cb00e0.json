{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"variant\", \"size\", \"color\", \"tintColor\", \"loading\", \"loadingIndicator\", \"loadingIndicatorPosition\", \"visible\", \"style\", \"pressableContainerStyle\", \"contentContainerStyle\", \"iconContainerStyle\", \"labelContainerStyle\", \"labelStyle\", \"loadingOverlayContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Surface from \"./Surface\";\nimport Pressable from \"./Pressable\";\nimport Text from \"./Text\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useStyles } from \"./hooks/use-styles\";\nimport { useAnimatedElevation } from \"./hooks/use-animated-elevation\";\n\nvar FAB = function FAB(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'standard' : _ref$variant,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'default' : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'secondary' : _ref$color,\n      tintColor = _ref.tintColor,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      loadingIndicator = _ref.loadingIndicator,\n      _ref$loadingIndicator = _ref.loadingIndicatorPosition,\n      loadingIndicatorPosition = _ref$loadingIndicator === void 0 ? 'icon' : _ref$loadingIndicator,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      style = _ref.style,\n      pressableContainerStyle = _ref.pressableContainerStyle,\n      contentContainerStyle = _ref.contentContainerStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      labelContainerStyle = _ref.labelContainerStyle,\n      labelStyle = _ref.labelStyle,\n      loadingOverlayContainerStyle = _ref.loadingOverlayContainerStyle,\n      pressEffect = _ref.pressEffect,\n      pressEffectColor = _ref.pressEffectColor,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      delayLongPress = _ref.delayLongPress,\n      disabled = _ref.disabled,\n      hitSlop = _ref.hitSlop,\n      pressRetentionOffset = _ref.pressRetentionOffset,\n      android_disableSound = _ref.android_disableSound,\n      android_ripple = _ref.android_ripple,\n      testOnly_pressed = _ref.testOnly_pressed,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var palette = usePaletteColor(color, tintColor);\n  var hasIcon = useMemo(function () {\n    return icon || loading && loadingIndicatorPosition === 'icon';\n  }, [icon, loading, loadingIndicatorPosition]);\n  var styles = useStyles(function () {\n    return {\n      container: {\n        backgroundColor: palette.main,\n        borderRadius: size === 'default' ? 28 : 20\n      },\n      pressableContainer: {\n        borderRadius: size === 'default' ? 28 : 20,\n        overflow: 'hidden'\n      },\n      pressable: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingStart: variant === 'extended' ? hasIcon ? size === 'default' ? 12 : 6 : size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n        paddingEnd: variant === 'extended' ? size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n        paddingVertical: size === 'default' ? 16 : 8\n      },\n      iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 24,\n        height: 24\n      },\n      labelContainer: {\n        marginStart: hasIcon ? size === 'default' ? 12 : 6 : 0\n      },\n      loadingOverlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: palette.main\n      })\n    };\n  }, [variant, size, palette, hasIcon]);\n  var animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n  useEffect(function () {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  }, [visible]);\n\n  var getLoadingIndicator = function getLoadingIndicator() {\n    if (!loadingIndicator) return React.createElement(ActivityIndicator, {\n      color: palette.on\n    });\n\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: palette.on\n          }\n        }, loadingIndicator);\n\n      case 'function':\n        return loadingIndicator({\n          color: palette.on\n        });\n\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  var getIcon = function getIcon() {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({\n      color: palette.on,\n      size: 24\n    }) : icon;\n  };\n\n  var getLabel = function getLabel() {\n    switch (typeof label) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, label);\n\n      case 'function':\n        return label({\n          color: palette.on\n        });\n\n      default:\n        return label;\n    }\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var handlePressIn = useCallback(function (event) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  var handlePressOut = useCallback(function (event) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  var animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n  return React.createElement(Surface, _extends({\n    style: [animatedElevation, styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, rest), React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.on,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasIcon && React.createElement(View, {\n    style: [styles.iconContainer, iconContainerStyle]\n  }, getIcon()), variant === 'extended' && React.createElement(View, {\n    style: [styles.labelContainer, labelContainerStyle]\n  }, getLabel()), loading && loadingIndicatorPosition === 'overlay' && React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))));\n};\n\nexport default FAB;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","Surface","Pressable","Text","ActivityIndicator","usePaletteColor","useStyles","useAnimatedElevation","FAB","icon","label","variant","size","color","tintColor","loading","loadingIndicator","loadingIndicatorPosition","visible","style","pressableContainerStyle","contentContainerStyle","iconContainerStyle","labelContainerStyle","labelStyle","loadingOverlayContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","hasIcon","styles","container","backgroundColor","main","borderRadius","pressableContainer","overflow","pressable","flexDirection","alignItems","paddingStart","paddingEnd","paddingVertical","iconContainer","justifyContent","width","height","labelContainer","marginStart","loadingOverlayContainer","StyleSheet","absoluteFillObject","animated","Animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLoadingIndicator","on","getIcon","getLabel","selectable","pressed","setPressed","handlePressIn","event","handlePressOut","animatedElevation","transform","scale","View"],"sources":["FAB.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Animated, GestureResponderEvent, StyleProp, StyleSheet, TextStyle, View, ViewStyle } from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface FABProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  icon?: React.ReactElement | ((props: { color: string; size: number }) => React.ReactElement | null) | null;\n\n  label?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  variant?: 'standard' | 'extended';\n\n  size?: 'default' | 'mini';\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  loading?: boolean;\n\n  loadingIndicator?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  loadingIndicatorPosition?: 'icon' | 'overlay';\n\n  visible?: boolean;\n\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  contentContainerStyle?: PressableProps['style'];\n\n  iconContainerStyle?: StyleProp<ViewStyle>;\n\n  labelContainerStyle?: StyleProp<ViewStyle>;\n\n  labelStyle?: StyleProp<TextStyle>;\n\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst FAB: React.FC<FABProps> = ({\n  icon,\n  label,\n  variant = 'standard',\n  size = 'default',\n  color = 'secondary',\n  tintColor,\n  loading = false,\n  loadingIndicator,\n  loadingIndicatorPosition = 'icon',\n  visible = true,\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  iconContainerStyle,\n  labelContainerStyle,\n  labelStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const hasIcon = useMemo(\n    () => icon || (loading && loadingIndicatorPosition === 'icon'),\n    [icon, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        backgroundColor: palette.main,\n        borderRadius: size === 'default' ? 28 : 20,\n      },\n      pressableContainer: {\n        borderRadius: size === 'default' ? 28 : 20,\n        overflow: 'hidden',\n      },\n      pressable: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingStart:\n          variant === 'extended'\n            ? hasIcon\n              ? size === 'default'\n                ? 12\n                : 6\n              : size === 'default'\n              ? 20\n              : 10\n            : size === 'default'\n            ? 16\n            : 8,\n        paddingEnd: variant === 'extended' ? (size === 'default' ? 20 : 10) : size === 'default' ? 16 : 8,\n        paddingVertical: size === 'default' ? 16 : 8,\n      },\n      iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 24,\n        height: 24,\n      },\n      labelContainer: {\n        marginStart: hasIcon ? (size === 'default' ? 12 : 6) : 0,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: palette.main,\n      },\n    }),\n    [variant, size, palette, hasIcon]\n  );\n\n  const animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false,\n    }).start();\n  }, [visible]);\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={palette.on} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: palette.on }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: palette.on });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getIcon = () => {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({ color: palette.on, size: 24 }) : icon;\n  };\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: palette.on }, labelStyle]}>\n            {label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n\n  return (\n    <Surface style={[animatedElevation, styles.container, { transform: [{ scale: animated }] }, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? palette.on}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasIcon && <View style={[styles.iconContainer, iconContainerStyle]}>{getIcon()}</View>}\n          {variant === 'extended' && <View style={[styles.labelContainer, labelContainerStyle]}>{getLabel()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n    </Surface>\n  );\n};\n\nexport default FAB;\n"]},"metadata":{},"sourceType":"module"}