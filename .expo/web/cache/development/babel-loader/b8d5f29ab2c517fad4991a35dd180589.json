{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"orientation\", \"thickness\", \"color\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport Box from \"./Box\";\n\nvar Divider = function Divider(_ref) {\n  var _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 1 : _ref$thickness,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#E0E0E0' : _ref$color,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var dividerStyle = useMemo(function () {\n    if (orientation === 'horizontal') return {\n      height: thickness,\n      backgroundColor: color\n    };else return {\n      width: thickness,\n      backgroundColor: color\n    };\n  }, [orientation, thickness, color]);\n  return React.createElement(Box, _extends({\n    style: [dividerStyle, style]\n  }, rest));\n};\n\nexport default Divider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,GAAP;;AAyBA,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,OAMlC;EAAA,4BALJC,WAKI;EAAA,IALJA,WAKI,iCALU,YAKV;EAAA,0BAJJC,SAII;EAAA,IAJJA,SAII,+BAJQ,CAIR;EAAA,sBAHJC,KAGI;EAAA,IAHJA,KAGI,2BAHI,SAGJ;EAAA,IAFJC,KAEI,QAFJA,KAEI;EAAA,IADDC,IACC;;EACJ,IAAMC,YAAY,GAAGR,OAAO,CAAC,YAAM;IACjC,IAAIG,WAAW,KAAK,YAApB,EACE,OAAO;MAAEM,MAAM,EAAEL,SAAV;MAAqBM,eAAe,EAAEL;IAAtC,CAAP,CADF,KAEK,OAAO;MAAEM,KAAK,EAAEP,SAAT;MAAoBM,eAAe,EAAEL;IAArC,CAAP;EAHqB,GAIzB,CAACF,WAAD,EAAcC,SAAd,EAAyBC,KAAzB,CAJyB,CAA5B;EAMA,OAAON,oBAACE,GAAD;IAAKK,KAAK,EAAE,CAACE,YAAD,EAAeF,KAAf;EAAZ,GAAuCC,IAAvC,EAAP;AAbF;;AAgBA,eAAeL,OAAf","names":["React","useMemo","Box","Divider","orientation","thickness","color","style","rest","dividerStyle","height","backgroundColor","width"],"sources":["Divider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface DividerProps extends BoxProps {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n\n  /**\n   * The thickness of the divider.\n   *\n   * @default 1\n   */\n  thickness?: number;\n\n  /**\n   * The color of the divider.\n   *\n   * @default '#E0E0E0'\n   */\n  color?: string;\n}\n\nconst Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  thickness = 1,\n  color = '#E0E0E0',\n  style,\n  ...rest\n}) => {\n  const dividerStyle = useMemo(() => {\n    if (orientation === 'horizontal')\n      return { height: thickness, backgroundColor: color };\n    else return { width: thickness, backgroundColor: color };\n  }, [orientation, thickness, color]);\n\n  return <Box style={[dividerStyle, style]} {...rest} />;\n};\n\nexport default Divider;\n"]},"metadata":{},"sourceType":"module"}