{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"spacing\", \"divider\", \"dividerStyle\", \"shouldWrapChildren\", \"childrenStyle\", \"children\"],\n    _excluded2 = [\"reverse\"],\n    _excluded3 = [\"reverse\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Flex from \"./Flex\";\nimport Selector, { notLastChild } from \"./Selector\";\nimport Divider from \"./Divider\";\nimport { useSpacing } from \"./SpacingFuncContext\";\nimport { getValidChildren } from \"./utilities\";\n\nvar Stack = function Stack(_ref) {\n  var _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 0 : _ref$spacing,\n      _ref$divider = _ref.divider,\n      divider = _ref$divider === void 0 ? false : _ref$divider,\n      dividerStyle = _ref.dividerStyle,\n      _ref$shouldWrapChildr = _ref.shouldWrapChildren,\n      shouldWrapChildren = _ref$shouldWrapChildr === void 0 ? false : _ref$shouldWrapChildr,\n      childrenStyle = _ref.childrenStyle,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var spacingValue = useSpacing(spacing);\n  var direction = useMemo(function () {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n  var spacingStyle = useMemo(function () {\n    switch (direction) {\n      case 'column':\n        return {\n          marginBottom: spacingValue\n        };\n\n      case 'row':\n        return {\n          marginEnd: spacingValue\n        };\n\n      case 'column-reverse':\n        return {\n          marginTop: spacingValue\n        };\n\n      case 'row-reverse':\n        return {\n          marginStart: spacingValue\n        };\n    }\n  }, [spacingValue, direction]);\n  var shouldUseChildren = !shouldWrapChildren && !divider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map(function (child, index) {\n    var key = typeof child.key !== 'undefined' ? child.key : index;\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = React.createElement(StackItem, {\n      key: key\n    }, child);\n\n    var _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!divider) return _child;\n    var dividerElement = React.isValidElement(divider) ? divider : React.createElement(Divider, {\n      orientation: direction === 'row' || direction === 'row-reverse' ? 'vertical' : 'horizontal'\n    });\n    var clonedDivider = React.cloneElement(dividerElement, {\n      key: key + \"-divider\",\n      style: [dividerElement.props.style, dividerStyle]\n    });\n\n    var _divider = isLast ? null : clonedDivider;\n\n    return [_child, _divider];\n  });\n  return React.createElement(Flex, rest, React.createElement(Selector, {\n    childrenStyle: [notLastChild(spacingStyle), childrenStyle]\n  }, clones));\n};\n\nexport default Stack;\n\nvar StackItem = function StackItem(props) {\n  return React.createElement(View, props);\n};\n\nexport var HStack = function HStack(_ref2) {\n  var reverse = _ref2.reverse,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  return React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'row-reverse' : 'row'\n  }));\n};\nexport var VStack = function VStack(_ref3) {\n  var reverse = _ref3.reverse,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  return React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'column-reverse' : 'column'\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","Flex","Selector","notLastChild","Divider","useSpacing","getValidChildren","Stack","spacing","divider","dividerStyle","shouldWrapChildren","childrenStyle","children","rest","spacingValue","direction","inline","spacingStyle","marginBottom","marginEnd","marginTop","marginStart","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","StackItem","_child","dividerElement","isValidElement","orientation","clonedDivider","cloneElement","style","props","_divider","View","HStack","reverse","VStack"],"sources":["Stack.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector, { notLastChild } from './Selector';\nimport Divider from './Divider';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface StackProps extends FlexProps, SelectorProps {\n  /**\n   * The spacing between items in the stack.\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, each stack item will show a divider.\n   *\n   * @default false\n   */\n  divider?: React.ReactElement;\n\n  /**\n   * A style object to apply to each divider.\n   */\n  dividerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Stack: React.FC<StackProps> = ({\n  spacing = 0,\n  divider = false,\n  dividerStyle,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const direction = useMemo(() => {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n\n  const spacingStyle = useMemo(() => {\n    switch (direction) {\n      case 'column':\n        return { marginBottom: spacingValue };\n      case 'row':\n        return { marginEnd: spacingValue };\n      case 'column-reverse':\n        return { marginTop: spacingValue };\n      case 'row-reverse':\n        return { marginStart: spacingValue };\n    }\n  }, [spacingValue, direction]);\n\n  const shouldUseChildren = !shouldWrapChildren && !divider;\n\n  const validChildren = getValidChildren(children);\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        const isLast = index + 1 === validChildren.length;\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>;\n        const _child = shouldWrapChildren ? wrappedChild : child;\n\n        if (!divider) return _child;\n\n        const dividerElement = React.isValidElement(divider) ? (\n          divider\n        ) : (\n          <Divider\n            orientation={\n              direction === 'row' || direction === 'row-reverse'\n                ? 'vertical'\n                : 'horizontal'\n            }\n          />\n        );\n\n        const clonedDivider = React.cloneElement(dividerElement, {\n          key: `${key}-divider`,\n          style: [dividerElement.props.style, dividerStyle],\n        });\n\n        const _divider = isLast ? null : clonedDivider;\n\n        return [_child, _divider];\n      });\n\n  return (\n    <Flex {...rest}>\n      <Selector childrenStyle={[notLastChild(spacingStyle), childrenStyle]}>\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Stack;\n\nconst StackItem: React.FC = (props) => <View {...props} />;\n\nexport interface HStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const HStack: React.FC<HStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'row-reverse' : 'row'} />;\n};\n\nexport interface VStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const VStack: React.FC<VStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'column-reverse' : 'column'} />;\n};\n"]},"metadata":{},"sourceType":"module"}